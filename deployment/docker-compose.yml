services:
  app:
    image: &app_image ghcr.io/d0nater/organization-manager

    restart: unless-stopped

    env_file: &app_env_file
      - .env

    environment: &app_environment
      MODE: app

    depends_on:
      migrations:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    healthcheck: &healthcheck
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 2s
      start_interval: 1s

    ports:
      - 127.0.0.1:8000:8000

  migrations:
    image: *app_image

    env_file: *app_env_file

    environment:
      <<: *app_environment
      MODE: migrations

    healthcheck:
      disable: true

    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:18-alpine

    restart: unless-stopped

    environment:
      POSTGRES_USER: ${POSTGRES_USER:?Required variable POSTGRES_USER not set}
      POSTGRES_DB: ${POSTGRES_DB:?Required variable POSTGRES_DB not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Required variable POSTGRES_PASSWORD not set}

    volumes:
      - ./data/postgres:/var/lib/postgresql/data

    healthcheck: &service_healthcheck
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 2s
      start_interval: 2s

  redis:
    image: redis:8-alpine

    restart: unless-stopped

    healthcheck:
      <<: *service_healthcheck
      test: ["CMD", "redis-cli", "ping"]
      start_period: 1s
      start_interval: 1s
